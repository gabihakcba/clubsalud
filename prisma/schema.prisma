// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum AccountPermissions {
  OWN
  ADM
  INS
  MEM
  OTHER
}

enum MemberState {
  ACTIVE
  INACTIVE
  OTHER
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum JobPosition {
  CLEANING
  MAINTENANCE
  RECEPTIONIST
  OTHER
}

enum ContractType {
  PERMANENT
  CASUAL
  OTHER
}

enum HealthPlanType {
  OSDE
  PAMI
  APROSS
  IPROSS
  OTHER
}

model Account {
  // Fields
  id                   Int                @id @default(autoincrement())
  username             String             @unique
  password             String
  permissions          AccountPermissions
  // Relations
  notificationSender   Notification[]     @relation(name: "sender")
  notifiactionReceiver Notification[]     @relation(name: "receiver")
  instructorAccount    Instructor[]       @relation(name: "instructorAccount")
  memberAccount        Member[]           @relation(name: "memberAccount")
  employeeAccount      Employee[]         @relation(name: "employeeAccount")
}

model Doctor {
  // Fields
  id             Int          @id @default(autoincrement())
  name           String
  lastName       String
  dni            BigInt       @db.BigInt
  cuit           BigInt?      @db.BigInt
  phoneNumber    BigInt       @db.BigInt
  licenseNumber1 BigInt       @db.BigInt
  licenseNumber2 BigInt?      @db.BigInt
  email          String
  isExternal     Boolean
  // Relations
  derivation     Derivation[] @relation(name: "derivationDoctor")
}

model Instructor {
  // Fields
  id                 Int                 @id @default(autoincrement())
  name               String
  lastName           String
  dni                BigInt              @db.BigInt
  cuit               BigInt?             @db.BigInt
  phoneNumber        BigInt              @db.BigInt
  address            String
  email              String
  degree             Boolean
  cbu                BigInt?             @db.BigInt
  alias              String?
  // Foreignkeys
  accountId          Int
  account            Account             @relation(fields: [accountId], references: [id], name: "instructorAccount", onDelete: Cascade)
  // Relations
  instructorPayments InstructorPayment[] @relation(name: "instructorPayment")
  givenClass         OpenClass[]         @relation(name: "givenClassInstructor")
  scheludeInCharge   Schedule[]          @relation(name: "instructorInCharge")
  scheludeSubstitute Schedule[]          @relation(name: "instructorSubstitute")
}

model Member {
  // Fields
  id                 Int                    @id @default(autoincrement())
  name               String
  lastName           String
  dni                BigInt                 @db.BigInt
  cuit               BigInt?                @db.BigInt
  phoneNumber        BigInt                 @db.BigInt
  address            String
  inscriptionDate    DateTime               @default(now())
  cancelationDate    DateTime?
  cancelationReason  String?
  derivedBy          String
  afiliateNumber     BigInt                 @db.BigInt
  state              MemberState
  remainingClasses   BigInt?                @db.BigInt
  // Foreignkeys
  accountId          Int
  medicalRecordId    Int?                   @unique
  account            Account                @relation(fields: [accountId], references: [id], name: "memberAccount", onDelete: Cascade)
  medicalRecord      MedicalRecord?         @relation(fields: [medicalRecordId], references: [id], name: "medicalRecord")
  // Relations
  memberAttendance   Attendance[]           @relation(name: "attendanceMember")
  memberReservation  Reservation[]          @relation(name: "reservationMember")
  memberSubscription Subscription[]         @relation(name: "subscriptionMember")
  planSubscribed     HealthPlanSubscribed[] @relation(name: "planMember")
  payment            Payment[]              @relation(name: "paymentMember")
  billedConsultation BilledConsultation[]   @relation(name: "consultationMember")
  derivation         Derivation[]           @relation(name: "derivationMember")
}

model InstructorPayment {
  // Fields
  id             Int        @id @default(autoincrement())
  amount         Float
  scheduledHours Float
  workedHours    Float
  workedMount    DateTime   @default(now())
  paymentDate    DateTime   @default(now())
  paymentState   Boolean    @default(false)
  pricePerHoour  Float
  // Foreignkeys
  instructorId   Int
  instructor     Instructor @relation(fields: [instructorId], references: [id], name: "instructorPayment")
}

model OpenClass {
  // Fields
  id               Int           @id @default(autoincrement())
  date             DateTime      @default(now())
  given            Boolean       @default(false)
  // Foreignkeys
  instructorId     Int
  classId          Int
  instructor       Instructor?   @relation(fields: [instructorId], references: [id], name: "givenClassInstructor")
  class            Class         @relation(fields: [classId], references: [id], name: "givenClassClass")
  // Relations
  attendanceClass  Attendance[]  @relation(name: "attendanceClass")
  reservationClass Reservation[] @relation(name: "reservationClass")
}

model Attendance {
  // Fields
  id       Int       @id @default(autoincrement())
  date     DateTime  @default(now())
  // Foreignkeys
  classId  Int
  memberId Int
  class    OpenClass @relation(fields: [classId], references: [id], name: "attendanceClass")
  member   Member    @relation(fields: [memberId], references: [id], name: "attendanceMember")
}

// Format 24hs each 30 min
// start: 0830
// end: 0900
model Schedule {
  // Fields
  id                   Int         @id @default(autoincrement())
  day                  Days
  start                Int
  end                  Int
  // Foreignkeys
  instructorInCharge   Int?
  instructorSubstitute Int?
  classId              Int?
  charge               Instructor? @relation(fields: [instructorInCharge], references: [id], name: "instructorInCharge")
  substitute           Instructor? @relation(fields: [instructorSubstitute], references: [id], name: "instructorSubstitute")
  class                Class?      @relation(fields: [classId], references: [id], name: "scheludedClass")
}

model Class {
  // Fields
  id        Int         @id @default(autoincrement())
  name      String
  duration  Float
  // Relations
  openClass OpenClass[] @relation(name: "givenClassClass")
  schelude  Schedule[]  @relation(name: "scheludedClass")
}

model Reservation {
  // Fields
  id          Int       @id @default(autoincrement())
  // Foreignkeys
  openClassId Int
  memberId    Int
  openClass   OpenClass @relation(fields: [openClassId], references: [id], name: "reservationClass")
  member      Member    @relation(fields: [memberId], references: [id], name: "reservationMember")
}

model BilledConsultation {
  // Fields
  id             Int          @id @default(autoincrement())
  amount         Float
  date           DateTime     @default(now())
  // Foreignkeys
  memberId       Int
  subscriptionId Int
  healthPlanId   Int
  member         Member       @relation(fields: [memberId], references: [id], name: "consultationMember")
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], name: "consultationSubscription")
  plan           HealthPlan   @relation(fields: [healthPlanId], references: [id], name: "consultationPlan")
}

model Payment {
  // Fields
  id             Int          @id @default(autoincrement())
  amount         Float
  date           DateTime     @default(now())
  // Foreignkeys
  memeberId      Int
  subscriptionId Int
  member         Member       @relation(fields: [memeberId], references: [id], name: "paymentMember", onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], name: "paymentSubscription", onDelete: Cascade)
}

model Derivation {
  // Fields
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  diagnosis String
  guidance  String
  // Foreingkeys
  memberId  Int
  doctorId  Int
  member    Member   @relation(fields: [memberId], references: [id], name: "derivationMember")
  doctor    Doctor   @relation(fields: [doctorId], references: [id], name: "derivationDoctor")
}

model Notification {
  // Fields
  id         Int     @id @default(autoincrement())
  subject    String
  body       String
  // Foreignkeys
  senderId   Int
  receiverId Int
  sender     Account @relation(fields: [senderId], references: [id], name: "sender")
  receiver   Account @relation(fields: [receiverId], references: [id], name: "receiver")
}

model Employee {
  // Fields
  id               Int               @id @default(autoincrement())
  name             String
  lastName         String
  dni              BigInt            @db.BigInt
  cuit             BigInt?           @db.BigInt
  phoneNumber      BigInt            @db.BigInt
  email            String
  position         JobPosition
  contractType     ContractType
  salary           Float
  lastSalaryUpdate DateTime          @default(now())
  // Foreignkeys
  accountId        Int?
  account          Account?          @relation(fields: [accountId], references: [id], name: "employeeAccount")
  // Relations
  payment          EmployeePayment[] @relation(name: "paymentEmployee")
}

model EmployeePayment {
  // Fields
  id           Int      @id @default(autoincrement())
  hoursWorked  Float
  amount       Float
  monthPayment DateTime @default(now())
  date         DateTime @default(now())
  paid         Boolean  @default(false)
  // Foreignkeys
  employeeId   Int
  employee     Employee @relation(fields: [employeeId], references: [id], name: "paymentEmployee")
}

model HealthPlanSubscribed {
  // Fields
  id       Int        @id @default(autoincrement())
  // Foreignkeys
  memberId Int
  planId   Int
  member   Member     @relation(fields: [memberId], references: [id], name: "planMember", onDelete: Cascade)
  plan     HealthPlan @relation(fields: [planId], references: [id], name: "planPlan", onDelete: Cascade)
}

model HealthPlan {
  // Fields
  id                     Int                    @id @default(autoincrement())
  name                   String
  description            String?
  type                   HealthPlanType?
  paymentPerConsultation Float
  // Relations
  planSubscription       HealthPlanSubscribed[] @relation(name: "planPlan")
  billedConsultation     BilledConsultation[]   @relation(name: "consultationPlan")
}

model MedicalRecord {
  // Fields
  id          Int     @id @default(autoincrement())
  medinttCode BigInt  @db.BigInt
  description String
  // Relations
  member      Member? @relation(name: "medicalRecord")
}

model Subscription {
  // Fields
  id                 Int                  @id @default(autoincrement())
  date               DateTime             @default(now())
  paid               Boolean
  remaining          Float
  total              Float
  // Foreignkeys
  promotionId        Int
  memberId           Int
  promotion          Promotion            @relation(fields: [promotionId], references: [id], name: "subscriptionPromotion", onDelete: Cascade)
  member             Member               @relation(fields: [memberId], references: [id], name: "subscriptionMember", onDelete: Cascade)
  // Relations
  payment            Payment[]            @relation(name: "paymentSubscription")
  billedConsultation BilledConsultation[] @relation(name: "consultationSubscription")
}

model Promotion {
  // Fields
  id                  Int            @id @default(autoincrement())
  title               String
  description         String
  amountWeeklyClasses Int
  amountPrice         Float
  lastPriceUpdate     DateTime       @default(now())
  // Relations
  subscription        Subscription[] @relation(name: "subscriptionPromotion")
}

model InstructorPrice {
  // Fields
  id         Int      @id @default(autoincrement())
  degree     Boolean
  amount     BigInt   @db.BigInt
  lastUpdate DateTime @default(now())
}

model ExtraCost {
  id Int @id @default(autoincrement())
}

model RegistrationForm {
  id Int @id @default(autoincrement())
}

model FollowUpForm {
  id Int @id @default(autoincrement())
}
